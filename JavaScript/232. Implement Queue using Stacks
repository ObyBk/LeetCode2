// Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).

// Implement the MyQueue class:

// void push(int x) Pushes element x to the back of the queue.
// int pop() Removes the element from the front of the queue and returns it.
// int peek() Returns the element at the front of the queue.
// boolean empty() Returns true if the queue is empty, false otherwise.

// Solution:

class MyQueue {
    constructor() {
        this.PrimaryStack = [];
        this.TempStack = [];
    }

    push(x) {
        while (this.PrimaryStack.length > 0) {
            this.TempStack.push(this.PrimaryStack.pop());
        }
        this.PrimaryStack.push(x);
        while (this.TempStack.length > 0) {
            this.PrimaryStack.push(this.TempStack.pop());
        }
    }

    pop() {
        return this.PrimaryStack.pop();
    }

    peek() {
        return this.PrimaryStack[this.PrimaryStack.length - 1];
    }

    empty() {
        return this.PrimaryStack.length === 0;
    }
}
